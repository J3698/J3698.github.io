<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-24T10:16:02-04:00</updated><id>http://localhost:4000/</id><title type="html">AntiProjects</title><subtitle>Where I document my projects.</subtitle><author><name>Antioch Sanders</name></author><entry><title type="html">Scotty.io: A Hack CMU Project</title><link href="http://localhost:4000/hackcmu/scotty-io-a-hack-cmu-project" rel="alternate" type="text/html" title="Scotty.io: A Hack CMU Project" /><published>2018-09-24T00:00:00-04:00</published><updated>2018-09-24T00:00:00-04:00</updated><id>http://localhost:4000/hackcmu/scotty-io-a-hack-cmu-project</id><content type="html" xml:base="http://localhost:4000/hackcmu/scotty-io-a-hack-cmu-project">&lt;p&gt;This past weekend, I got to work on a game at Hack CMU with my friends Many McCoy, Kushal Dulla, and Arvind Govinday. Here’s an excerpt from our project description:&lt;/p&gt;

&lt;p&gt;“We wanted to create an ‘.io’ type game that involves multiple players and a leaderboard to keep rank. As we were brainstorming ideas for our game, we reflected on our few weeks spent here at CMU and the week of tests ahead. As we saw more people around us worrying about exams, we wanted to remind our peers not to over obsess over them. We thought the best way to convey a message would be through a mix of comedy and a simple yet addicting game mechanic that can draw people in.”&lt;/p&gt;

&lt;p&gt;I’ve used AWS Cloud9, Node.js and Socket.io before, so my biggest contribution was setting up the Cloud9 environment and getting everyone acclimated to Node.js and Socket.io. But even as I was setting the environment up, the others were working on other parts of the game; everyone was instrumental to getting the project finished in 24 hours.&lt;/p&gt;

&lt;p&gt;To read more, play the game, watch the youtube video or even read our quickly written code, visit our official project page &lt;a href=&quot;https://devpost.com/software/cmellon-io&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">This past weekend, I got to work on a game at Hack CMU with my friends Many McCoy, Kushal Dulla, and Arvind Govinday. Here’s an excerpt from our project description:</summary></entry><entry><title type="html">Reactive Lighting: An Overview</title><link href="http://localhost:4000/reactive/reactive-lighting-an-overview" rel="alternate" type="text/html" title="Reactive Lighting: An Overview" /><published>2018-09-18T00:00:00-04:00</published><updated>2018-09-18T00:00:00-04:00</updated><id>http://localhost:4000/reactive/reactive-lighting-an-overview</id><content type="html" xml:base="http://localhost:4000/reactive/reactive-lighting-an-overview">&lt;p&gt;I admit it - I’ve fallen in love with LED strips. The goal of this project is to be able to connect via bluetooth to a speaker system. The system’s processor will recieve audio data, and then analyze it for beats and other musical features. Next, the system will tell some addressable RGB LED strips what patterns to display, as music comes from the speakers.&lt;/p&gt;

&lt;p&gt;For now, I plan to use a raspberry pi to recieve bluetooth data and perform necessary processing. The raspberry pi will control APA102 LED strips, and will output sound to an OontZ Angle 3.&lt;/p&gt;

&lt;p&gt;Once I finish the first prototype, I’ll focus on making the reactive lighting more interesting. I’ll also focus on streamlining the system - the raspberry I use might be overkill, and powering the lights will definitely be an issue.&lt;/p&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">I admit it - I’ve fallen in love with LED strips. The goal of this project is to be able to connect via bluetooth to a speaker system. The system’s processor will recieve audio data, and then analyze it for beats and other musical features. Next, the system will tell some addressable RGB LED strips what patterns to display, as music comes from the speakers.</summary></entry><entry><title type="html">Make Posting Easy: Upgrade to Jekyll</title><link href="http://localhost:4000/website/make-posting-easy-upgrade-to-jekyll" rel="alternate" type="text/html" title="Make Posting Easy: Upgrade to Jekyll" /><published>2018-08-29T00:00:00-04:00</published><updated>2018-08-29T00:00:00-04:00</updated><id>http://localhost:4000/website/make-posting-easy-upgrade-to-jekyll</id><content type="html" xml:base="http://localhost:4000/website/make-posting-easy-upgrade-to-jekyll">&lt;p&gt;If it takes 10 minutes to just set up a new blog post, something is probably wrong. Especially if much of that time includes copy-pasting formatting from another post. With that in mind, I recently upgraded my website to use Jekyll.&lt;/p&gt;

&lt;p&gt;Jekyll is pretty simple - you write posts in plain text or using markdown, and then you use a theme or create layout files in html to surround that text. If you want, you can even include html in your markdown/plain text posts, although that can tend to defeat the purpose.&lt;/p&gt;

&lt;p&gt;To get an idea of what using Jekyll is like, here is my directory structure right now, minus some less relevant files:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_posts/&lt;/strong&gt; is where all of the posts go. Each post gets named in a particular way, and at the top of each post there are about 5 lines of setup (author, date, etc).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_layouts/&lt;/strong&gt; is where html for the posts and other pages go. Each layout file has a place where content will be inserted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_includes/&lt;/strong&gt; is where common html goes. For example, I might make header.html in _includes, and then include that header in different layout files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_site/&lt;/strong&gt; is a staging area - I don’t mess with anything there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pics/&lt;/strong&gt; is pretty self explanatory - I put pictures there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt; can become complicated - it lets me change how certain things are automated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;longboard.html&lt;/strong&gt; is a landing page that lists my longboard posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;website.html&lt;/strong&gt; lists my website posts (like this post).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;styles.css&lt;/strong&gt; contains all the styling I need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;404.html&lt;/strong&gt; is where you’ll end up if you visit a nonexistent post.&lt;/p&gt;

&lt;p&gt;Last but certainly not least, I learned most of the jekyll I know from Mike Dane - he’s crystal clear, and you’ll find yourself doing things you may have thought weren’t possible in Jekyll in no time:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/T1itpPvFWHI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">If it takes 10 minutes to just set up a new blog post, something is probably wrong. Especially if much of that time includes copy-pasting formatting from another post. With that in mind, I recently upgraded my website to use Jekyll.</summary></entry><entry><title type="html">The Plan: Diagramming the Electronics</title><link href="http://localhost:4000/longboard/the-plan-diagramming-the-electronics" rel="alternate" type="text/html" title="The Plan: Diagramming the Electronics" /><published>2018-08-26T00:00:00-04:00</published><updated>2018-08-26T00:00:00-04:00</updated><id>http://localhost:4000/longboard/the-plan-diagramming-the-electronics</id><content type="html" xml:base="http://localhost:4000/longboard/the-plan-diagramming-the-electronics">&lt;p&gt;This post is a high level description of the electronics I used - it’s not necessary to make the build that I did, but it’s meant to be helpful in understanding why I made certain decisions.&lt;/p&gt;

&lt;h2 id=&quot;the-big-picture&quot;&gt;&lt;strong&gt;The Big Picture&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/elec-vision.png&quot; alt=&quot;diagram&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;The big picture for the electronics is for a charging system to supply power to two different battery systems. One battery system will power the motor, and the other will be for the lower power electronics, such as the lights, bluetooth reciever, and circuitry used to control the motor. The high power and low power electronics are run off of different batteries mostly because I had three different batteries. You could just use the bigger battery system and run the lower power electronics off of regulators and buck converters, such as in the following diagram:&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/sselec-vision.png&quot; alt=&quot;diagram&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;battery-and-charging&quot;&gt;&lt;strong&gt;Battery and Charging&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/charging-vision.png&quot; alt=&quot;diagram&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Let’s take a deeper look at the charging system. On the low power side of the electronics, we have a buck conveter - this efficiently changes the 24 volts from the power jack to the 11.1 volts the 3S battery expects while charging. The buck converter I got is also CC CV. This means that in addition to having a knob to adjust voltage output (CV - constant voltage), the buck converter has a knob to limit output current (CC - constant current). Lipo batteries are generally charged using a CC CV supply, as an excess of charging voltage or current can harm them.&lt;/p&gt;

&lt;p&gt;On the motor side of the electronics, we have a boost converter. This will efficiently change a lower input voltage (24 volts from the laptop charger I have) to the 25.6 volts expected by the bigger 6S battery. The diode following the boost converter will stop current from travelling backwards towards the other side of the electronics. If the diode wasn’t present, the 6S battery would end up charging the 3S battery, damaging itself as its own voltage sank lower and lower.&lt;/p&gt;

&lt;p&gt;Each battery also has a voltage monitor and a balance connected. The balances ensure that the cells in a given battery are at the same voltage (this increases the lifepsan of the battery), and the monitors go off if the battery they’re connected to is dangerously low on charge.&lt;/p&gt;

&lt;h2 id=&quot;low-power-electronics&quot;&gt;&lt;strong&gt;Low Power Electronics&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/lowp-vision.png&quot; alt=&quot;diagram&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Zooming in on low power electronics side, after the battery, we have a switch to power the board on and off. Then a buck converter changes the 3S battery’s 11.1 volts to 6 volts, which the lights and Arduino are happy with. It’s important that the buck is after the switch. If the switch was after the buck, then even when the board was off, the buck would consume available power for its indicator light.&lt;/p&gt;

&lt;p&gt;The Arduino is the brains of the board - it runs code to control everything else. This is because optimally, all of the electronics on the board would be controllable via Bluetooth. The Arduino takes input from the Bluetooth module, which it also powers. It also has a control wire running to the speed controller for the motor. One drawback to the Arduino’s centrality is that if the Arduino becomes too busy with one particular task, everything stops. For this reason, it might be wise to use two Arduinos in the future.&lt;/p&gt;

&lt;p&gt;The lights are controlled by the Arduino, but powered from the buck converter, as they can use up to 7 amps of current. They’re just for show.&lt;/p&gt;

&lt;p&gt;The piezo horn is pretty straight forward - it takes a DC voltage in, and makes a loud noise. It might be wise to power it through a relay in the future - it operates with 5 volts to 8 volts, so it doesn’t reach its noise potential using the Arduino’s 5 volts.&lt;/p&gt;

&lt;p&gt;The motor relay is actually two relays. The first relay controls the programming button on the speed controller, and the other can be used to switch the speed controller on and off. The relay board is powered using a 5 volt regulator, since the board pulls more current than the Arduino can handle&lt;/p&gt;

&lt;h2 id=&quot;high-power-electronics&quot;&gt;&lt;strong&gt;High Power Electronics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The electronics on the high power side are pretty simple - the 6S battery powers the electronic speed controller, which powers and controls the motor. The speed controller is controlled in every way by the Arduino using relays.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Boost Converter -&lt;/strong&gt; Ebay lists 150W DC-DC boost converters for $6 that look just like this one.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/boost.jpg&quot; alt=&quot;Boost Converter&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Buck Converter (2) -&lt;/strong&gt; Ebay lists 150W DC-DC CC CV buck converters for $4 that look like this one.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/buck.jpeg&quot; alt=&quot;Buck Converter&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Diode &amp;gt;=10A, &amp;gt;=30V -&lt;/strong&gt; Microcenter has the NTE5812HC for $1.70
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/diode.jpg&quot; alt=&quot;diode&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;3S Lipo Battery -&lt;/strong&gt; Ebay, Amazon, or HobbyKing will stock 3S batteries. The battery’s C rating multiplied by its capacity should be at least 20, however most will be quite a bit bigger (e.g 20C * 5000mAh = 100A). If the low power electronics suck up around 10A with the lights fully on (low power battery life will go up 10x with the lights off), you will get (60h r/min * Capacity / 10A) minutes of battery life (e.g. 60 min/hr * 5000 mAh / 10 A = 30 min). A 5000mAh 3S will be about $30.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/3S.jpg&quot; alt=&quot;3S Lipo Battery&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;6S Lipo Battery (or two more 3S) -&lt;/strong&gt; The battery or batteries for the high power side should have capacity times C rating at at least 100 (e.g. 20C * 5000mAh = 100A). The bigger the better - the 6S battery capacity will determine the longboard’s range. A 5000 mAh 6S will be about $60.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/6S.jpg&quot; alt=&quot;6S Lipo Battery&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Voltage Monitor (One for each battery) -&lt;/strong&gt; These are available at any big online retailer and most RC retailers. I have two from two different companies - both are inaccurate in the mid range by about 0.1 volts. Fortunately the inaccuracy is consistent, and the voltage alarm can be set to different voltages. I purchased 4 for $14. 
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/lipo-monitor.jpg&quot; alt=&quot;Lipo Battery Monitor&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Balance (One 6S, one 3S) -&lt;/strong&gt; Search for “balance bms lipo” to find these on Ebay. I got one for $7. The balance doesn’t need discharge or charge connections - just places to connect the balance. To learn more, look up battery management systems.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/balance-bms.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Switch &amp;gt;=10A, &amp;gt;=15V -&lt;/strong&gt; I got a heavy duty switch from Microcenter for about $2.50.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/switch.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ESC &amp;gt;=100A, &amp;gt;=6S -&lt;/strong&gt; I got the waterproof 8BL150 Hobbywing for about $85. The gold standard for ESCs is the VESC, or Vedder ESC. It was designed to be very flexible, costs around $100 (it can get highr), and is specifically for electric longboards.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/esc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Outrunner Motor ~5055, ~250-~350 kV -&lt;/strong&gt; I got a 280kV motor from Ebay for about $50. Some motors have higher kV ratings, but are a lot smaller than 5055. A smaller motor won’t have as much torque, and thus won’t actually go as fast as it claims with a person riding. 
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/5055motor.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Arduino Pro Micro 5V -&lt;/strong&gt; The Pro Micro is small, has dedicated serial IO, and can be bounght in packs for $5 a piece or less on Ebay.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/pro-micro.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Relay Board &amp;gt;= 2 Channel-&lt;/strong&gt; Relay boards built for microcontrollers isolate the controller from the switching current, protecting the Arduino. I got a 4 channel board from microcenter for $12, but haven’t ended up using the extra 2 channels.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/relay-board.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1M Addressable RGB Lights Sealed (2x)-&lt;/strong&gt; Each of these is around $25 on Sparkfun or Ebay. You can find them cheaper, but they may use a different protocol, or lack some of the features that these have (such as waterproofing). 
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/leds.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bluetooth Mate Gold-&lt;/strong&gt; Sparkfun sells these for $35 if you want 100m of range, but you can get bluetooth modules elsewhere for a lot cheaper. 
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/bluetooth.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Piezo -&lt;/strong&gt; I got this from Microcenter for $5. This buzzes when given a DC voltage - you can get buzzers that need a switching voltage, but then the Arduino will have to do more work.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/buzzer.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parts Total: ~$369&lt;/p&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">This post is a high level description of the electronics I used - it’s not necessary to make the build that I did, but it’s meant to be helpful in understanding why I made certain decisions.</summary></entry><entry><title type="html">It Hurts: Setting Up the Bluetooth Module</title><link href="http://localhost:4000/longboard/it-hurts-setting-up-the-bluetooth-module" rel="alternate" type="text/html" title="It Hurts: Setting Up the Bluetooth Module" /><published>2018-07-17T00:00:00-04:00</published><updated>2018-07-17T00:00:00-04:00</updated><id>http://localhost:4000/longboard/it-hurts-setting-up-the-bluetooth-module</id><content type="html" xml:base="http://localhost:4000/longboard/it-hurts-setting-up-the-bluetooth-module">&lt;p&gt;I control my longboard’s motor and lights with an Arduino, a Bluetooth module, and my Android phone. It was a pain, but I got it working, so I’d like to make life easier for other people interested in doing what I did. This post is about setting up the Bluetooth module - the phone part will come later. An exhaustive parts list is at the end.&lt;/p&gt;

&lt;h2 id=&quot;important-notes&quot;&gt;&lt;strong&gt;Important Notes&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;RX/TX Issues ●&lt;/strong&gt; The Bluetooth module used here uses two-pin serial-communication, which is also used by USB. In fact, on many Arduino devices, the USB port is linked to the RX/TX pins. This means that if the Arduino serial-monitor and Bluetooth module are used at the same time, data sent to one also gets sent to the other. For those looking to work around this limitation, there are various libraries that enable serial communication on pins other than RX/TX, such as SoftwareSerial, NewSoftSerial, and AltSoftSerial. Each library has its respective drawbacks, and I never got SoftwareSerial to work with the Arduino Uno or Arduino Pro Micro. Fortunately, the &lt;a href=&quot;https://store.arduino.cc/usa/arduino-micro&quot;&gt;Pro Micro’s serial pins are separate from the USB interface (see the first bullet under “Input and Output” under “documentation”&lt;/a&gt;. So I used the Pro Micro. If you choose to use an Arduino that does not have this separation, such as the Uno (and most others), either use one of the libraries I mentioned, or append debug info to a string while the program runs, and print that string once the program is done. That way, the Bluetooth only recieves information that it’s not meant to see once it’s no longer needed for testing. &lt;a href=&quot;https://gist.github.com/J3698/3d1e19666feb7a5fd9ae1324314fc29d&quot;&gt;This is an example&lt;/a&gt;. Keep that in mind if you use the Uno; the rest of this post is based around the Pro Micro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming Issues ●&lt;/strong&gt; Reguardless of the model used, I sometimes had problems programming Arduinos when the Bluetooth module was connected to RX/TX. My fix was to cut power to anything connected to RX/TX, program the Arduino, reconnect whatever was on RX/TX, and then reset the program (I reset the Pro Micro by unplugging and replugging its USB connection).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Soldering Issues ●&lt;/strong&gt; When I first soldered the header pins onto my Arduino, the headers were stable, but the solder joints didn’t have enough solder, causing pins to randomly lose connection. For people who mostly program, trying to find this bug in your code will not be fun - make sure your hardware is setup correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting Up the Bluetooth Module&lt;/strong&gt;
First, hook up RX on the Bluetooth module to TX on the Arduino, TX on the Bluetooth module to RX on the Arduino, VCC on the Bluetooth module to VCC on the Arduino, and ground on the Bluetooth to ground on the Arduino.&lt;/p&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/bt-hookup.png&quot; alt=&quot;Connection diagram for bluetooth&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Now it’s time to program the Arduino. The first program we are going to write will be used to send and retrieve the Bluetooth module’s settings:
&lt;script src=&quot;https://gist.github.com/J3698/ab69434e4eb814a8f70d96cdeba57c2a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;After uploading this code, make sure the serial monitor’s baud rate is 115200, and that the serial monitor’s line-ending mode is set to none. Next, send “$$$” through the serial monitor. The red light on the Bluetooth module should start blinking faster, and the serial monitor should print “CMD”.&lt;/p&gt;
&lt;h5 id=&quot;troubleshooting--talking-to-the-bluetooth-module-is-often-the-hardest-part-if-the-light-doesnt-blink-faster-the-bluetooth-module-either-didnt-get-the-message-or-couldnt-understand-the-message-if-the-light-blinks-faster-but-nothing-appears-in-the-serial-monitor-the-arduinoserial-monitor-did-not-read-what-the-bluetooth-module-sent-back-if-trash-other-than-cmd-appears-in-the-serial-monitor-the-serial-monitor-incorrectly-interpreted-what-was-sent-back---the-serial-monitors-baud-rate-is-likely-wrong-if-only-part-of-cmd-appears-try-again---sometimes-data-is-lost-at-high-baud-rates-if-the-output-is-incorrect-but-the-light-blinks-faster-as-a-last-resort-you-can-follow-along-with-the-post---you-may-be-able-to-change-the-bluetooth-modules-baud-rate-fixing-your-issue&quot;&gt;&lt;strong&gt;Troubleshooting ●&lt;/strong&gt; Talking to the Bluetooth module is often the hardest part. If the light doesn’t blink faster, the Bluetooth module either didn’t get the message, or couldn’t understand the message. If the light blinks faster but nothing appears in the serial monitor, the Arduino/serial monitor did not read what the Bluetooth module sent back. If trash other than “CMD” appears in the serial monitor, the serial monitor incorrectly interpreted what was sent back - the serial monitor’s baud rate is likely wrong. If only part of “CMD” appears, try again - sometimes data is lost at high baud rates. If the output is incorrect but the light blinks faster, as a last resort you can follow along with the post - you may be able to change the Bluetooth module’s baud rate, fixing your issue.&lt;/h5&gt;
&lt;p&gt;Now that the light is blinking faster, the bluetooth is in command mode. In command mode every command needs to be terminated with a carriage return, so change the line-ending mode in serial monitor to carriage return. Enter “x”, and the Bluetooth module should respond with its settings. Now enter “SU,96”, which will lower the baud rate of the Bluetooth module. Enter “—”, which will exit command mode, and the Bluetooth module should then blink more slowly. Power off the Arduino, change instances of 115200 in your code to 9600, reprogram the Arduino, open serial monitor, change the line-ending mode back to none, and change the serial monitor baud rate to 9600.&lt;/p&gt;

&lt;p&gt;You’re done! For some reason, this part of my longboard project took me forever. From here you can continue to explore the Bluetooth module, which has further documentation &lt;a href=&quot;https://cdn.sparkfun.com/assets/1/e/e/5/d/5217b297757b7fd3748b4567.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Arduino Pro Micro -&lt;/strong&gt; The Arduino controls pretty much everything under the longboard.
I chose the pro micro because it’s small and cheap ($6 on amazon/ebay). It also happens
to have dedicated TX/RX pins for when software serial doesn’t work, but that belongs
in a different longboard post.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/pro-micro.jpg&quot; alt=&quot;Arduino Pro Micro&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bluetooth Mate Gold -&lt;/strong&gt; The Bluetooth module is what we’ll be setting up today, at $35. The
Bluetooth Mate Silver also works, it’s only $25 but has a much smaller range.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parts Total: ~$41&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Computer -&lt;/strong&gt; Anything with an OS and a free USB port will work.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Micro-USB Plug -&lt;/strong&gt; You’ll need to program the Arduino.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">I control my longboard’s motor and lights with an Arduino, a Bluetooth module, and my Android phone. It was a pain, but I got it working, so I’d like to make life easier for other people interested in doing what I did. This post is about setting up the Bluetooth module - the phone part will come later. An exhaustive parts list is at the end.</summary></entry><entry><title type="html">Building a Personal Website</title><link href="http://localhost:4000/website/building-a-personal-website" rel="alternate" type="text/html" title="Building a Personal Website" /><published>2018-07-15T00:00:00-04:00</published><updated>2018-07-15T00:00:00-04:00</updated><id>http://localhost:4000/website/building-a-personal-website</id><content type="html" xml:base="http://localhost:4000/website/building-a-personal-website">&lt;p&gt;I’m creating a personal website because I think it’s a great way to showcase my work. I have three goals for this website. First, I want the website to feel professional. Second, I want my articles to read well. Third, I want my content to impress.&lt;/p&gt;

&lt;p&gt;To make sure the website looked professional, I had to have a custom domain. So I bought a domain from Google Domains, and used Github Pages as a host. Curtis Larson has an excellent guide for connecting Github Pages and Google Domains, so I followed  &lt;a href=&quot;http://www.curtismlarson.com/blog/2015/04/12/github-pages-google-domains/&quot;&gt;his advice&lt;/a&gt;. The only issue with his article is that the ip addresses he lists are out of date - I found newer addresses &lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/&quot;&gt;here&lt;/a&gt;, under “configuring A records with your DNS provider.” I also benefited greatly from Github’s &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages guide&lt;/a&gt;. The only thing I had to pay for was the domain name (which is pretty much unavoidable), and that was just $12.00 a year.&lt;/p&gt;

&lt;p&gt;Because I want my articles to read well, there aren’t a lot of extras on the website - no ads or widgets. The bar at the top of the page is only used to get to the home page. Writing doesn’t take up the full width of the page, which makes articles easier to read.&lt;/p&gt;

&lt;p&gt;As for impressing people? The website is a good start, but the rest of my content is yet to come. My next post is probably going to be about my electric longboard.&lt;/p&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">I’m creating a personal website because I think it’s a great way to showcase my work. I have three goals for this website. First, I want the website to feel professional. Second, I want my articles to read well. Third, I want my content to impress.</summary></entry><entry><title type="html">Do It Right: Attaching Lights to The Longboard</title><link href="http://localhost:4000/longboard/do-it-right-attaching-lights-to-the-longboard" rel="alternate" type="text/html" title="Do It Right: Attaching Lights to The Longboard" /><published>2018-07-15T00:00:00-04:00</published><updated>2018-07-15T00:00:00-04:00</updated><id>http://localhost:4000/longboard/do-it-right-attaching-lights-to-the-longboard</id><content type="html" xml:base="http://localhost:4000/longboard/do-it-right-attaching-lights-to-the-longboard">&lt;p&gt;Out of all of the bits and pieces of this electric longboard project, working with lights has been one of the most difficult and exciting parts.  Disclaimer, yes my friend &lt;a href=&quot;http://shihaocao.com&quot;&gt;Shihao&lt;/a&gt; did the mechanical assembly for the motor, but still - a lot of longboards have nice motors, not a lot of longboard have wicked lights. So let’s dive in.  I’ve included a list of parts at the end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Light Fixture #0&lt;/strong&gt; For my first attempt at attaching lights to the longboard, I cut out small squares of wood using my highschool’s bandsaw. Then I hot glued the squares onto the longboard, and the lights onto the squares. At first it worked out… but the hot glue connections would suddenly come loose.&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/fixture0.jpeg&quot; alt=&quot;Longboard with weak light fixtures&quot; width=&quot;300px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Light Fixture #1&lt;/strong&gt; Hot glue wasn’t working, so I turned to using wood screws. I also replaced some of the wooden squares with longer wooden strips, so there was more surface area to attach the lights. To connect the wooden pieces to the board, I would drill a pilot hole all the way through the wood and then longboard, and then I would drive the wood screws in after.&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/fixture1.png&quot; alt=&quot;Longboard with better light fixtures&quot; width=&quot;500px&quot; height=&quot;350px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Longer pieces of wood I could clamp down before drilling, but the smaller pieces would spin when I drilled them down, so I used a clamp to twist them to their correct orientation after they were drilled down.&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/twist.jpg&quot; alt=&quot;Twisting a block of wood to orientation&quot; width=&quot;350px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Sometimes a wood screw would go all the way through the longboard, making for a dangerous point that came up through the grip tape, so I ground the points down with a dremel.&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/grinding0.gif&quot; alt=&quot;Grinding a dangerous screw point down&quot; width=&quot;300px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Applying Velcro&lt;/strong&gt; Cutting Velcro was the messiest part of attaching the lights. After just one cut, Velcro’s industrial strength adhesive catches in scissors. I used a pair of Cutco Super Shears to start each cut of the Velcro, but did the rest of the cut with an X-Acto knife. Before putting velcro on the wooden blocks, I cleaned the blocks with rubbing alcohol and let them dry.&lt;br /&gt;&lt;br /&gt;There are two parts to velcro.  The fuzzy part is called the “loop” side - it resembles a carpet, which is made up of loops. The stiffer side is called the “hook” side. Generally the loops pick up trash more easily, and need to be replaced more often - so they are put on the side where the Velcro is easier to replace. I thought it would be easier to replace the Velcro on the lights, so I put the loops on the lights, and the hooks on the board.&lt;/p&gt;
&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/loops.jpeg&quot; alt=&quot;&quot; width=&quot;500px&quot; height=&quot;350px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/hooks.jpeg&quot; alt=&quot;&quot; width=&quot;300px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;After that, I was done! Next it was time to perfect the programming for the lights.&lt;/p&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/attached0.jpeg&quot; alt=&quot;Front Lights View&quot; width=&quot;533px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/attached1.jpeg&quot; alt=&quot;Bottom Lights View&quot; width=&quot;533px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/attached2.jpeg&quot; alt=&quot;Top Lights View&quot; width=&quot;400px&quot; height=&quot;533px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;center-img&quot;&gt;
	&lt;img src=&quot;../pics/attached3.jpeg&quot; alt=&quot;Side Lights View&quot; width=&quot;533px&quot; height=&quot;400px&quot; style=&quot;max-width:100%&quot; /&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Parts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wood (~1/2” thick) -&lt;/strong&gt; This is for mounting the lights. I got some for free from a scrap pile at school,
and then used part of a bigger plank I’d gotten for $10 at home depot.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/wood.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;LED RGB Strip - Addressable, Sealed (1m) (2x) -&lt;/strong&gt; I got these from sparkfun for $50 total.
These are WS2812s, with a wire for ground, power, and data. LEDs with two data wires
(5060 LEDs) will probably play better with other arduino accessories, but check the reviews
on durability first, and decide if you want your lights to be addressable
(i.e do you want cool patterns, i.e. yes).
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/leds.jpg&quot; alt=&quot;LED Light Strips&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1” Self-Drilling Wood-Screws -&lt;/strong&gt; To connect the light fixtures to the board! I got 100 of these
from Home Depoot for $8, although I can’t find them on the website. It’s okay if the screws
aren’t self-drilling.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/screws.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;4 ft. x 2 in. Industrial Strength Velcro -&lt;/strong&gt; This stuff is great, so the $10 is worth being
able to safely attach and detach your $50 worth of ligts.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/velcro.jpg&quot; alt=&quot;Industrial Strength Velcro&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parts Total: ~$78&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jig Saw -&lt;/strong&gt; A bandsaw or even handsaw will work, but you need to be able to cut 1/2” thickwood, so
I got a Hypertough jigsaw from walmart for only $20.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/jigsaw.jpeg&quot; alt=&quot;HyperTough Jig Saw&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Electric Drill -&lt;/strong&gt; If you can drill by hand, congratulations - you’ll be connecting 1/2” thick
pieces of wood together. Again I went with Hypertough, it was the cheapest I saw at Walmart, at $20. Mine
is corded, cordless drills are generally more expensive.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/drill.jpeg&quot; alt=&quot;HyperTough Electric Drill&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Drill Bit Set -&lt;/strong&gt; I only ended up using the 7/64” drill bit and the 1/4” hex drive bit, but I’m sure the
109 piece drill bit set I got for $13 will come in handy again.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/bits.jpeg&quot; alt=&quot;Drill Bit Set&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dremel -&lt;/strong&gt; I used the Dremel as a grinder and sander. I got it from Walmart for $20.
&lt;br /&gt;
&lt;img class=&quot;list&quot; src=&quot;../pics/dremel.jpeg&quot; alt=&quot;Dremel&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tools Total: ~$73&lt;/p&gt;</content><author><name>Antioch Sanders</name></author><summary type="html">Out of all of the bits and pieces of this electric longboard project, working with lights has been one of the most difficult and exciting parts. Disclaimer, yes my friend Shihao did the mechanical assembly for the motor, but still - a lot of longboards have nice motors, not a lot of longboard have wicked lights. So let’s dive in. I’ve included a list of parts at the end.</summary></entry></feed>